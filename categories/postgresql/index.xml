<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgresql on Posts</title>
    <link>https://www.jacoelho.com/categories/postgresql/</link>
    <description>Recent content in Postgresql on Posts</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 02 May 2022 10:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jacoelho.com/categories/postgresql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Opentelemetry - Log-Based Change Data Capture tracing</title>
      <link>https://www.jacoelho.com/blog/2022/05/opentelemetry-log-based-change-data-capture-tracing/</link>
      <pubDate>Mon, 02 May 2022 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2022/05/opentelemetry-log-based-change-data-capture-tracing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://opentelemetry.io/&#34;&gt;Opentelemetry&lt;/a&gt; provides vendor neutral standards and implementations to generate, collect, and export tracing data.&lt;/p&gt;&#xA;&lt;p&gt;A Context is a propagation mechanism which carries execution-scoped values across API boundaries and between logically associated execution units. Cross-cutting concerns access their data in-process using the same shared Context object.&lt;/p&gt;&#xA;&lt;p&gt;Context propagation is required when the tracing needs to cross process or service boundaries. Common ways to propagate the context is using &lt;a href=&#34;https://www.w3.org/TR/trace-context/&#34;&gt;W3C Trace Context&lt;/a&gt; or &lt;a href=&#34;https://github.com/openzipkin/b3-propagation&#34;&gt;Zipkin B3 headers&lt;/a&gt;, while to inject the context is, for example, http headers or metadata fields in event messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgreSQL - UUID vs TEXT</title>
      <link>https://www.jacoelho.com/blog/2021/06/postgresql-uuid-vs-text/</link>
      <pubDate>Sat, 05 Jun 2021 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2021/06/postgresql-uuid-vs-text/</guid>
      <description>&lt;p&gt;In PostgreSQL one can represent &lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;UUID&lt;/a&gt; as &lt;code&gt;UUID&lt;/code&gt;, &lt;code&gt;TEXT&lt;/code&gt; or &lt;code&gt;VARCHAR&lt;/code&gt; built-in types.&lt;/p&gt;&#xA;&lt;h3 id=&#34;which-type-represents-a-uuid-more-efficiently-mainly-in-the-jsonb-context&#34;&gt;Which type represents a UUID more efficiently? Mainly in the JSONB context?&lt;/h3&gt;&#xA;&lt;p&gt;My gut feeling says built-in type &lt;code&gt;UUID&lt;/code&gt; is way better.&lt;/p&gt;&#xA;&lt;p&gt;One trap with using &lt;code&gt;TEXT&lt;/code&gt; is trying to compare different cases with equals:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ef9f94da-98ef-49fa-8224-32f3e1f592b3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EF9F94DA-98EF-49FA-8224-32F3E1F592B3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; equal;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; equal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; f&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checking the relevant &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4122#section-3&#34;&gt;RFC4122&lt;/a&gt; section:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Each field is treated as an integer and has its value printed as a&#xA;zero-filled hexadecimal digit string with the most significant&#xA;digit first.  The hexadecimal values &amp;#34;a&amp;#34; through &amp;#34;f&amp;#34; are output as&#xA;lower case characters and are case insensitive on input.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which the &lt;code&gt;UUID&lt;/code&gt; type correctly handles:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
