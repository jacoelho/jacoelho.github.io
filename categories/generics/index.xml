<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Generics on Posts</title>
    <link>https://www.jacoelho.com/categories/generics/</link>
    <description>Recent content in Generics on Posts</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 29 Nov 2021 10:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jacoelho.com/categories/generics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go Generic Programming - Testing the waters</title>
      <link>https://www.jacoelho.com/blog/2021/11/go-generic-programming-testing-the-waters/</link>
      <pubDate>Mon, 29 Nov 2021 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2021/11/go-generic-programming-testing-the-waters/</guid>
      <description>&lt;p&gt;Go &lt;a href=&#34;https://go.googlesource.com/proposal/&amp;#43;/refs/heads/master/design/43651-type-parameters.md&#34;&gt;Type Parameters Proposal&lt;/a&gt; is expected to be implemented with Go 1.18 early 2022.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;Very high level overview&lt;/code&gt; section contains a nice overview of what to expect.&lt;/p&gt;&#xA;&lt;p&gt;If you have seen generics in other languages perhaps the most curious differences (other than using square brackets), are union types:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SignedIntegers&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int8&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int16&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar in syntax to scala3/dotty union types, although in Go is only allowed in constraints. The type set of this union element is the set {int, int8, int16, int32, int64}.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
