<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Posts</title>
    <link>https://www.jacoelho.com/categories/golang/</link>
    <description>Recent content in Golang on Posts</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sun, 11 May 2025 10:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.jacoelho.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Dependency Lifecycle Management in Go</title>
      <link>https://www.jacoelho.com/blog/2025/05/dependency-lifecycle-management-in-go/</link>
      <pubDate>Sun, 11 May 2025 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2025/05/dependency-lifecycle-management-in-go/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Lifecycle management ensures that application components like servers, databases, and background workers are correctly initialized, started in the right order, and gracefully stopped.&lt;/p&gt;&#xA;&lt;p&gt;Go developers typically wire dependencies manually, instead of relying on heavy frameworks or reflection based dependency injection. This approach improves readability and reduces hidden behavior, but it also shifts the burden of managing component interactions and lifecycle sequencing onto the developer.&lt;/p&gt;&#xA;&lt;p&gt;As applications scale, the lack of built-in orchestration increases the risk of subtle bugs and inconsistent shutdown behavior.&lt;/p&gt;</description>
    </item>
    <item>
      <title>structured logging: slog</title>
      <link>https://www.jacoelho.com/blog/2023/09/structured-logging-slog/</link>
      <pubDate>Mon, 11 Sep 2023 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2023/09/structured-logging-slog/</guid>
      <description>&lt;p&gt;Event logging is one of the three pillars of observability (traces and metrics being the other two).&lt;/p&gt;&#xA;&lt;p&gt;A log entry is a timestamped record about the application&amp;rsquo;s activity, which can be used for troubleshooting, monitoring or auditing purposes.&lt;/p&gt;&#xA;&lt;p&gt;Logs may have different formats:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;unstructured or plain text: similar to print statements, free-form text&lt;/li&gt;&#xA;&lt;li&gt;semi-structured: some values have a structure and the remaining data free-form&lt;/li&gt;&#xA;&lt;li&gt;structured: there is a well-defined and consistent format, such as: &lt;a href=&#34;https://www.w3.org/TR/WD-logfile.html&#34;&gt;W3C Log Format&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Common_Log_Format&#34;&gt;NCSA Log Format&lt;/a&gt;, Key/Value Pair, CSV or JSON, among others. Structured logs can be easily machine parsed, which simplifies analytics, filtering and aggregation.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This article is a non-exhaustive walkthrough of logging in Go.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Opentelemetry - Log-Based Change Data Capture tracing</title>
      <link>https://www.jacoelho.com/blog/2022/05/opentelemetry-log-based-change-data-capture-tracing/</link>
      <pubDate>Mon, 02 May 2022 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2022/05/opentelemetry-log-based-change-data-capture-tracing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://opentelemetry.io/&#34;&gt;Opentelemetry&lt;/a&gt; provides vendor neutral standards and implementations to generate, collect, and export tracing data.&lt;/p&gt;&#xA;&lt;p&gt;A Context is a propagation mechanism which carries execution-scoped values across API boundaries and between logically associated execution units. Cross-cutting concerns access their data in-process using the same shared Context object.&lt;/p&gt;&#xA;&lt;p&gt;Context propagation is required when the tracing needs to cross process or service boundaries. Common ways to propagate the context is using &lt;a href=&#34;https://www.w3.org/TR/trace-context/&#34;&gt;W3C Trace Context&lt;/a&gt; or &lt;a href=&#34;https://github.com/openzipkin/b3-propagation&#34;&gt;Zipkin B3 headers&lt;/a&gt;, while to inject the context is, for example, http headers or metadata fields in event messages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go Generic Programming - Testing the waters</title>
      <link>https://www.jacoelho.com/blog/2021/11/go-generic-programming-testing-the-waters/</link>
      <pubDate>Mon, 29 Nov 2021 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2021/11/go-generic-programming-testing-the-waters/</guid>
      <description>&lt;p&gt;Go &lt;a href=&#34;https://go.googlesource.com/proposal/&amp;#43;/refs/heads/master/design/43651-type-parameters.md&#34;&gt;Type Parameters Proposal&lt;/a&gt; is expected to be implemented with Go 1.18 early 2022.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;Very high level overview&lt;/code&gt; section contains a nice overview of what to expect.&lt;/p&gt;&#xA;&lt;p&gt;If you have seen generics in other languages perhaps the most curious differences (other than using square brackets), are union types:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SignedIntegers&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int8&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int16&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int32&lt;/span&gt; | &lt;span style=&#34;color:#66d9ef&#34;&gt;int64&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Similar in syntax to scala3/dotty union types, although in Go is only allowed in constraints. The type set of this union element is the set {int, int8, int16, int32, int64}.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go - On logging and dependencies</title>
      <link>https://www.jacoelho.com/blog/2021/06/go-on-logging-and-dependencies/</link>
      <pubDate>Tue, 08 Jun 2021 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2021/06/go-on-logging-and-dependencies/</guid>
      <description>&lt;p&gt;Doing code reviews, I have sometimes noticed libraries forcing dependencies on the users.&lt;/p&gt;&#xA;&lt;p&gt;While it is perfectly acceptable if well justified and documented, it sometimes feels like adding unnecessary baggage.&lt;/p&gt;&#xA;&lt;p&gt;A typical example would be something like the following snippet:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;HealthCheck&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;logrus&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debug&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending get request&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRequestWithContext&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodGet&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;logrus&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Debugf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http status code was %d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using logrus, as example, picking this code, one would need to check how logrus works, which configurations are available, which version should be used and so on.&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgreSQL - UUID vs TEXT</title>
      <link>https://www.jacoelho.com/blog/2021/06/postgresql-uuid-vs-text/</link>
      <pubDate>Sat, 05 Jun 2021 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2021/06/postgresql-uuid-vs-text/</guid>
      <description>&lt;p&gt;In PostgreSQL one can represent &lt;a href=&#34;https://en.wikipedia.org/wiki/Universally_unique_identifier&#34;&gt;UUID&lt;/a&gt; as &lt;code&gt;UUID&lt;/code&gt;, &lt;code&gt;TEXT&lt;/code&gt; or &lt;code&gt;VARCHAR&lt;/code&gt; built-in types.&lt;/p&gt;&#xA;&lt;h3 id=&#34;which-type-represents-a-uuid-more-efficiently-mainly-in-the-jsonb-context&#34;&gt;Which type represents a UUID more efficiently? Mainly in the JSONB context?&lt;/h3&gt;&#xA;&lt;p&gt;My gut feeling says built-in type &lt;code&gt;UUID&lt;/code&gt; is way better.&lt;/p&gt;&#xA;&lt;p&gt;One trap with using &lt;code&gt;TEXT&lt;/code&gt; is trying to compare different cases with equals:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ef9f94da-98ef-49fa-8224-32f3e1f592b3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;EF9F94DA-98EF-49FA-8224-32F3E1F592B3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; equal;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; equal&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt; f&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Checking the relevant &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4122#section-3&#34;&gt;RFC4122&lt;/a&gt; section:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Each field is treated as an integer and has its value printed as a&#xA;zero-filled hexadecimal digit string with the most significant&#xA;digit first.  The hexadecimal values &amp;#34;a&amp;#34; through &amp;#34;f&amp;#34; are output as&#xA;lower case characters and are case insensitive on input.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which the &lt;code&gt;UUID&lt;/code&gt; type correctly handles:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go - Embed</title>
      <link>https://www.jacoelho.com/blog/2021/04/go-embed/</link>
      <pubDate>Tue, 27 Apr 2021 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2021/04/go-embed/</guid>
      <description>&lt;p&gt;Go 1.16 added a new &lt;a href=&#34;https://golang.org/pkg/embed/&#34;&gt;embed&lt;/a&gt; package.&lt;/p&gt;&#xA;&lt;p&gt;While the idea is not a novelty, there were already some packages with slightly different APIs fulfilling similar roles, for example:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/kevinburke/go-bindata&#34;&gt;go-bindata&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/GeertJohan/go.rice&#34;&gt;go-rice&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Having an official package is always a welcome addition to the batteries-included standard library.&lt;/p&gt;&#xA;&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;&#xA;&lt;p&gt;A possible way to embed react assets could be as simple as:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;web&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;embed&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;io/fs&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//go:embed build/*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;embed&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FS&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And serving assets using &lt;code&gt;http.FileServer&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go - On building URL strings</title>
      <link>https://www.jacoelho.com/blog/2021/04/go-on-building-url-strings/</link>
      <pubDate>Sat, 17 Apr 2021 10:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2021/04/go-on-building-url-strings/</guid>
      <description>&lt;p&gt;Building URL strings in Go may be accomplished in a couple different ways:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;url.Parse&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;string concatenation (using &lt;code&gt;+&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;fmt.Sprintf&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;bytes.Buffer&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;strings.Builder&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;You may be asking yourself: which one should I use, then? As always, the answer depends. Let us explore why.&lt;/p&gt;&#xA;&lt;h2 id=&#34;urlparse&#34;&gt;&lt;code&gt;URL.Parse&lt;/code&gt;&lt;/h2&gt;&#xA;&lt;p&gt;Before we start, a quick refresh on the URL structure:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://www.jacoelho.com/images/url.png&#34; alt=&#34;url&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;One important fact to be aware is that when building URLs manually, it is easy to forget the &lt;a href=&#34;https://en.wikipedia.org/wiki/Percent-encoding&#34;&gt;percentage-encoding&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing a client library in Go</title>
      <link>https://www.jacoelho.com/blog/2020/09/writing-a-client-library-in-go/</link>
      <pubDate>Fri, 25 Sep 2020 12:00:00 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2020/09/writing-a-client-library-in-go/</guid>
      <description>&lt;p&gt;There are multiple ways of writing client libraries in Go. In this post, I will explore what I look for in a library depending if I am developing or checking if it is suitable for a project.&lt;/p&gt;&#xA;&lt;p&gt;Without any specific order of importance, these are my thoughts on the subject.&lt;/p&gt;&#xA;&lt;h2 id=&#34;usage-and-examples&#34;&gt;Usage and Examples&lt;/h2&gt;&#xA;&lt;p&gt;Like a book can be judged by its cover, a project can be judged by its README. Therefore providing examples helps getting an idea of how the library works: if it will fit a project or how good the developer usability is (this includes function naming, usage difficulty or how easy it is to misuse).&lt;/p&gt;</description>
    </item>
    <item>
      <title>A story about Go http.Client</title>
      <link>https://www.jacoelho.com/blog/2017/08/a-story-about-go-http.client/</link>
      <pubDate>Sat, 19 Aug 2017 10:24:46 +0000</pubDate>
      <guid>https://www.jacoelho.com/blog/2017/08/a-story-about-go-http.client/</guid>
      <description>&lt;p&gt;Or how I have learned to embrace &lt;em&gt;http.RoundTripper&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Using a http client in &lt;em&gt;Go&lt;/em&gt; usually starts like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everything works, until it doesn’t: a network blip, a connection reset, a slow&lt;br&gt;&#xA;response, etc.&lt;/p&gt;&#xA;&lt;p&gt;After some research (I recommend reading &lt;a href=&#34;https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/&#34;&gt;The complete guide to Go net/http&lt;br&gt;&#xA;timeouts&lt;/a&gt;)&lt;br&gt;&#xA;you may end up writing something similar to:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Client&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;: &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Transport&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;Dial&lt;/span&gt;: (&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;net&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Dialer&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;Timeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;KeepAlive&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }).&lt;span style=&#34;color:#a6e22e&#34;&gt;Dial&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;TLSHandshakeTimeout&lt;/span&gt;:   &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseHeaderTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;ExpectContinueTimeout&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;MethodGet&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.google.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok! But now the question is: how does &lt;em&gt;http.Client&lt;/em&gt; really work?&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
