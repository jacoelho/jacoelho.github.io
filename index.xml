<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts</title>
    <link>https://www.jacoelho.com/</link>
    <description>Recent content on Posts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 17 Apr 2021 10:00:00 +0000</lastBuildDate><atom:link href="https://www.jacoelho.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go - On building URL strings</title>
      <link>https://www.jacoelho.com/blog/building_url_strings/</link>
      <pubDate>Sat, 17 Apr 2021 10:00:00 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/building_url_strings/</guid>
      <description>In Go building URL strings may be done in a couple different ways:
 string concatenation - operator + fmt.Sprintf bytes.Buffer strings.Builder url.Parse  One may ask, which one should be used and as always the answer depends.
URL Building One important fact to be aware is when building URLs manually, it is easy to do the encoding wrong and ignore percentage-encode.
Before starting a quick refresh on the URL structure:</description>
    </item>
    
    <item>
      <title>Writing a client library in Go</title>
      <link>https://www.jacoelho.com/blog/client-library-in-go/</link>
      <pubDate>Fri, 25 Sep 2020 12:00:00 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/client-library-in-go/</guid>
      <description>There are multiple ways of writing client libraries in Go. In this post, I will explore what I look for in a library depending if I am developing or checking if it is suitable for a project.
Without any specific order of importance, these are my thoughts on the subject.
Usage and Examples Like a book can be judged by its cover, a project can be judged by its README. Therefore providing examples helps getting an idea of how the library works: if it will fit a project or how good the developer usability is (this includes function naming, usage difficulty or how easy it is to misuse).</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.jacoelho.com/about/</link>
      <pubDate>Tue, 19 Feb 2019 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/about/</guid>
      <description>I am an infrastructure automation developer with extensive experience in designing and implementing highly available and maintainable infrastructure solutions, continuous integration, delivery and deployment processes. Background encompasses web development, security, networking, windows and unix systems.</description>
    </item>
    
    <item>
      <title>A story about Go http.Client</title>
      <link>https://www.jacoelho.com/blog/a-story-about-go-http-client/</link>
      <pubDate>Sat, 19 Aug 2017 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/a-story-about-go-http-client/</guid>
      <description>Or how I have learned to embrace http.RoundTripper
Using a http client in Go usually starts like this:
resp, err := http.Get(&amp;#34;http://example.com/&amp;#34;) Everything works, until it doesn’t: a network blip, a connection reset, a slow response, etc.
After some research (I recommend reading The complete guide to Go net/http timeouts) you may end up writing something similar to:
c := &amp;amp;http.Client{ Transport: &amp;amp;http.Transport{ Dial: (&amp;amp;net.Dialer{ Timeout: 30 * time.Second, KeepAlive: 30 * time.</description>
    </item>
    
    <item>
      <title>Kafka — Accelerating!</title>
      <link>https://www.jacoelho.com/blog/kafka-accelerating/</link>
      <pubDate>Tue, 22 Nov 2016 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/kafka-accelerating/</guid>
      <description>Quick tips and insights on how to make Apache Kafka work faster!
Hardware  CPU doesn&amp;rsquo;t matter that much. Memory helps a lot (a lot) in performance. SSDs are not required, since most operations are sequential read and writes. If possible run in bare metal.  Linux  Configure to maximize memory usage (tweak until you feel comfortable):  vm.dirty_background_ratio = 5 vm.dirty_ratio = 80 vm.swappiness = 1  Assuming you are using ext4, don’t waste space with reserved blocks:  tune2fs -m 0 -i 0 -c -1 /dev/device  Mount with noatime:  /dev/device /mountpoint ext4 defaults,noatime  Keep an eye on the number of free inodes:  tune2fs -l /dev/device | grep -i inode  Increase limits, for example, using systemd:  $ cat /etc/systemd/system/kafka.</description>
    </item>
    
    <item>
      <title>Stability Patterns — Circuit Breaker</title>
      <link>https://www.jacoelho.com/blog/stability-patterns-circuit-breaker/</link>
      <pubDate>Sat, 20 Aug 2016 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/stability-patterns-circuit-breaker/</guid>
      <description>A circuit breaker is an automatically operated electrical switch designed to protect an electrical circuit from damage caused by over-current or overload or short circuit. Its basic function is to interrupt current flow after protective relays detect a fault. A circuit breaker can be reset (either manually or automatically) to resume normal operation.
 The software analogue as described in Release it! chapter 5.2 can prevent repeated calls to a failing service by detecting issues and providing a fallback, by using this pattern it is possible to avoid cascading failures.</description>
    </item>
    
    <item>
      <title>Ansible vs PCI</title>
      <link>https://www.jacoelho.com/blog/ansible-vs-pci/</link>
      <pubDate>Tue, 16 Aug 2016 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/ansible-vs-pci/</guid>
      <description>If you need to to comply with PCI requirements like:
 Requirement 2: Maintain an inventory of system components in scope for PCI DSS to support effective scoping practices.
 You will find that using public-key authentication is sometimes forbidden as it’s almost impossible to ensure employees are rotating the keys, keeping the private key safe and with a strong password.
Using Ansible without ssh key based authentication is painful if you need to run a playbook against hundreds of servers, as you will need to insert your password ad nauseam.</description>
    </item>
    
    <item>
      <title>Docker: Configuration files</title>
      <link>https://www.jacoelho.com/blog/docker-configuration-files/</link>
      <pubDate>Sun, 14 Aug 2016 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/docker-configuration-files/</guid>
      <description>Things no one tells you about. One of Docker’s killer features is the environment parity, yet it feels like one little detail was left untold: how to handle configuration files.
Unless you are using the same configuration between development, quality, production, etc. you will end up with different endpoints, API keys, secret tokens and feature switches for each environment.
Available Options There are a couple of different ways to handle configuration in Docker.</description>
    </item>
    
    <item>
      <title>Collectd plugins made easy</title>
      <link>https://www.jacoelho.com/blog/collectd-plugins-made-easy/</link>
      <pubDate>Tue, 09 Aug 2016 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/collectd-plugins-made-easy/</guid>
      <description>Collectd is a Unix daemon that collects, transfers and stores performance data of computers and network equipment. The acquired data is meant to help system administrators maintain an overview over available resources to detect existing or looming bottlenecks.
 Collectd provides a long list of plugins available out-of-box. However, if you need to collect additional metrics, one of the easiest ways to do so is using the exec plugin.</description>
    </item>
    
    <item>
      <title>Chef Custom Resources</title>
      <link>https://www.jacoelho.com/blog/chef-custom-resources/</link>
      <pubDate>Wed, 13 Jul 2016 10:24:46 +0000</pubDate>
      
      <guid>https://www.jacoelho.com/blog/chef-custom-resources/</guid>
      <description>Lately I’ve been writing some Chef code. One of the best things about Chef is custom resources: https://docs.chef.io/custom_resources.html
Let’s see an example on how to create a Kafka topic using Chef and how to make it idempotent.
Before writing any Chef code it is important to understand how to manage a topic (grouping of messages of a similar type).
From the Kafka install directory, first check if the topic already exists:</description>
    </item>
    
  </channel>
</rss>
